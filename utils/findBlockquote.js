function findBlockquote(_data) {
  const data = _data.filter((item) => item.tagName === "div");
  console.log("üöÄ ~ findBlockquote ~ data:", JSON.stringify(data[0]));
  // Base case: if the current object is a blockquote, return it

  console.log(
    _data
      .map((cont) =>
        cont.attributes.children.filter((child) => {
          console.log(children);
          child.tagName === "blockquote";
        })
      )
      .filter((item) => item.flat().length > 0)
      ?.flat()[0]?.children[0]?.children
  );

  // If the current object has children, recursively search through them
  return _data
    .map((cont) =>
      cont.attributes.children.filter((child) => {
        console.log(children);
        child.tagName === "blockquote";
      })
    )
    .filter((item) => item.flat().length > 0)
    ?.flat()[0]?.children[0]?.children;

  // Return null if no blockquote is found in the current branch
  return null;
}

const extractBlockquoteText = (article) => {
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –¥–æ—á—ñ—Ä–Ω—ñ—Ö —Ç–µ–≥—ñ–≤
  const extractTextFromChildren = (children) => {
    return children
      .map((child) => {
        if (typeof child === "string") {
          return child; // –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
        } else if (child.children) {
          return extractTextFromChildren(child.children); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        }
        return ""; // –Ø–∫—â–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –∂–æ–¥–µ–Ω –≤–∞—Ä—ñ–∞–Ω—Ç
      })
      .join(""); // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —à–º–∞—Ç–∫–∏ —Ç–µ–∫—Å—Ç—É
  };

  let blockquoteText = "";

  // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—å–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
  if (article.body && article.body.content) {
    article.body.content.forEach((element) => {
      if (element.tagName === "div" && element.children) {
        element.children.forEach((child) => {
          if (child.tagName === "blockquote") {
            // –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –±–ª–æ–∫—É –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            blockquoteText += extractTextFromChildren(child.children) + " ";
          }
        });
      }
    });
  }

  return blockquoteText.trim(); // –û–±—Ä—ñ–∑–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è
};
module.exports = { findBlockquote, extractBlockquoteText };
